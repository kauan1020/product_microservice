name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necessário para o SonarQube analisar histórico

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Instalação de dependências do sistema necessárias
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev libgmp3-dev

      # Abordagem mais direta: criar ambiente virtual manualmente e instalar pycryptodome
      - name: Set up Python environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip

          # Extrair dependências do pyproject.toml para requirements.txt temporário
          python -c '
          import toml
          import sys
          
          try:
              with open("pyproject.toml") as f:
                  pyproject = toml.load(f)
                  
              deps = []
              # Procurar por dependências em tool.poetry.dependencies
              if "tool" in pyproject and "poetry" in pyproject["tool"] and "dependencies" in pyproject["tool"]["poetry"]:
                  for pkg, ver in pyproject["tool"]["poetry"]["dependencies"].items():
                      if pkg == "python":
                          continue
                          
                      # Substituir pycrypto por pycryptodome
                      if pkg == "pycrypto":
                          deps.append("pycryptodome>=3.18.0")
                      else:
                          if isinstance(ver, str):
                              deps.append(f"{pkg}{ver}")
                          else:
                              deps.append(pkg)
                              
              # Adicionar dependências de dev para testes
              if "tool" in pyproject and "poetry" in pyproject["tool"] and "group" in pyproject["tool"]["poetry"] and "dev" in pyproject["tool"]["poetry"]["group"]:
                  for pkg, ver in pyproject["tool"]["poetry"]["group"]["dev"]["dependencies"].items():
                      if isinstance(ver, str):
                          deps.append(f"{pkg}{ver}")
                      else:
                          deps.append(pkg)
                          
              # Se não encontrou dependências nas seções poetry, tente outras localizações comuns
              if not deps and "project" in pyproject and "dependencies" in pyproject["project"]:
                  for pkg, ver in pyproject["project"]["dependencies"].items():
                      if pkg == "pycrypto":
                          deps.append("pycryptodome>=3.18.0")
                      else:
                          if isinstance(ver, str):
                              deps.append(f"{pkg}{ver}")
                          else:
                              deps.append(pkg)
              
              # Escrever para requirements.txt
              with open("requirements.txt", "w") as f:
                  f.write("\n".join(deps))
                  
              print("requirements.txt criado com sucesso!")
              
          except Exception as e:
              print(f"Erro ao processar pyproject.toml: {e}", file=sys.stderr)
              sys.exit(1)
          '
          
          # Se não conseguiu criar o requirements.txt, criar um básico
          if [ ! -f requirements.txt ]; then
            echo "pycryptodome>=3.18.0" > requirements.txt
            echo "pytest>=7.0.0" >> requirements.txt
            echo "pytest-cov>=4.0.0" >> requirements.txt
            echo "behave>=1.2.6" >> requirements.txt
          fi
          
          # Instalar as dependências
          pip install -r requirements.txt
          
          # Instalar pytest e behave se não estiverem no requirements
          pip install pytest pytest-cov behave coverage

      - name: Run unit tests with coverage
        run: |
          source .venv/bin/activate
          cd tech
          pytest tests --cov=. --cov-report=xml:../coverage.xml --cov-report=term
          cd ..

      - name: Run BDD tests with Behave
        run: |
          source .venv/bin/activate
          cd tech
          behave tests/tech/bdd/features/
          cd ..

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=products_microservice
            -Dsonar.projectName="Products Microservice"
            -Dsonar.sources=tech
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.exclusions=**/__pycache__/**,**/tests/**,**/*.html,**/htmlcov/**
            -Dsonar.coverage.exclusions=tests/**/*,**/test_*.py,**/__init__.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Cria um Dockerfile temporário que usa pip em vez de Poetry
      - name: Create Dockerfile for pip
        run: |
          cat > Dockerfile.pip << EOF
          FROM python:3.11-slim as builder

          # Instalação de dependências do sistema
          RUN apt-get update && apt-get install -y \\
              build-essential \\
              libssl-dev \\
              libffi-dev \\
              libgmp3-dev \\
              gcc \\
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /app

          # Copiar requirements.txt (gerado anteriormente)
          COPY requirements.txt .

          # Instalar dependências, substituindo pycrypto por pycryptodome
          RUN pip install --no-cache-dir -r requirements.txt && \\
              if pip list | grep -q pycrypto; then \\
                pip uninstall -y pycrypto && \\
                pip install --no-cache-dir pycryptodome>=3.18.0; \\
              fi

          # Copiar o código da aplicação
          COPY . .

          # Estágio final
          FROM python:3.11-slim

          # Instalar pacotes necessários em tempo de execução
          RUN apt-get update && apt-get install -y \\
              libgmp3-dev \\
              && rm -rf /var/lib/apt/lists/*

          # Criar usuário não-root
          RUN useradd --create-home appuser
          WORKDIR /home/appuser
          USER appuser

          # Copiar as dependências e código da aplicação
          COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
          COPY --from=builder /app /home/appuser/app

          WORKDIR /home/appuser/app

          # Expõe a porta que a aplicação usa
          EXPOSE 8080

          # Define variáveis de ambiente
          ENV PYTHONUNBUFFERED=1 \\
              PYTHONDONTWRITEBYTECODE=1 \\
              ENVIRONMENT=production

          # Comando para iniciar a aplicação
          CMD ["python", "-m", "tech.app"]
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.pip  # Usar o Dockerfile modificado para pip
          push: true
          tags: |
            131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/products:latest
            131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/products:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name tech-eks-cluster --region us-east-1

      - name: Deploy to Kubernetes
        run: |
          kubectl get namespace products || kubectl create namespace products
          
          # Use o latest tag no deploy
          kubectl set image deployment/products-service products-service=131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/products:latest -n products || kubectl apply -f k8s/deployment.yaml
          
          kubectl rollout status deployment/products-service -n products --timeout=300s