name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev libgmp-dev

      - name: Pre-install cryptography libraries
        run: |
          # Verificar se o pyproject.toml está na raiz ou em tech/
          if [ -f "tech/pyproject.toml" ]; then
            echo "pyproject.toml encontrado em tech/"
            cd tech
          fi
          
          pip install -U pip
          pip install cryptography pycryptodome
          pip uninstall -y pycrypto || true
          
          # Voltar para a raiz se mudamos para tech/
          if [ -f "pyproject.toml" ]; then
            cd ..
          fi

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: |
          # Verificar se o pyproject.toml está na raiz ou em tech/
          if [ -f "tech/pyproject.toml" ]; then
            echo "Configurando Poetry para o diretório tech/"
            cd tech
          fi
          
          poetry config virtualenvs.create false
          
          # Voltar para a raiz se mudamos para tech/
          if [ -f "pyproject.toml" ]; then
            cd ..
          fi

      - name: Install dependencies
        run: |
          # Verificar se estamos na raiz ou na pasta tech
          if [ -f "pyproject.toml" ]; then
            echo "pyproject.toml encontrado na raiz"
            # Instalar certifi e pymongo diretamente
            pip install --no-cache-dir certifi==2024.2.2 pymongo[srv]==4.6.1
            
            # Tentar instalar com Poetry
            poetry install --no-interaction || poetry install --no-interaction --without dev
          elif [ -f "tech/pyproject.toml" ]; then
            echo "pyproject.toml encontrado na pasta tech"
            cd tech
            # Instalar certifi e pymongo diretamente
            pip install --no-cache-dir certifi==2024.2.2 pymongo[srv]==4.6.1
            
            # Tentar instalar com Poetry
            poetry install --no-interaction || poetry install --no-interaction --without dev
            cd ..
          else
            echo "Não foi possível encontrar pyproject.toml"
            exit 1
          fi
          
          # Instalar pytest se necessário
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          # Determinar a raiz do projeto e estrutura de diretórios
          if [ -d "tech" ]; then
            echo "Diretório tech encontrado na raiz"
            PROJECT_ROOT="."
          else
            echo "Estamos já dentro do diretório tech"
            PROJECT_ROOT=".."
          fi
          
          # Verificar estrutura de diretórios de teste
          if [ -d "${PROJECT_ROOT}/tech/tests" ]; then
            echo "Running tests from tech/tests"
            cd $PROJECT_ROOT
            pytest tech/tests --cov=tech --cov-report=xml:coverage.xml
          elif [ -d "${PROJECT_ROOT}/tests" ]; then
            echo "Running tests from tests directory"
            cd $PROJECT_ROOT
            pytest tests --cov=tech --cov-report=xml:coverage.xml
          else
            echo "No tests directory found"
            # Criar um arquivo de cobertura vazio para não quebrar os próximos passos
            echo '<?xml version="1.0" ?><coverage version="1.0"></coverage>' > coverage.xml
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=products_microservice
            -Dsonar.projectName="Products Microservice"
            -Dsonar.sources=tech
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.exclusions=**/__pycache__/**,**/tests/**,**/*.html,**/htmlcov/**
            -Dsonar.coverage.exclusions=tests/**/*,**/test_*.py,**/__init__.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./tech
          push: true
          tags: |
            131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/products:latest
            131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/products:${{ github.sha }}
          platforms: linux/amd64

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name tech-eks-cluster --region us-east-1

      - name: Deploy to Kubernetes
        run: |
          kubectl get namespace products || kubectl create namespace products
          
          kubectl set image deployment/products-service products-service=131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/products:latest -n products || kubectl apply -f k8s/deployment.yaml
          
          if [ -f k8s/service.yaml ]; then
            kubectl apply -f k8s/service.yaml
          fi
          
          kubectl rollout status deployment/products-service -n products --timeout=300s